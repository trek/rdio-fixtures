var OAuth = require('oauth').OAuth;

/* 
  Rdio constructor. Options are
    key: your rdio API key
    sharedSecret: your rdio shared secret
    accessToken: an oauth access token obtained for a user
    accessTokenSecret: an oauth access toke secret obtained for a user
*/
var Rdio = function(options){
  this.key = options.key;
  this.sharedSecret = options.sharedSecret;
  
  this.accessToken = options.accessToken;
  this.accessTokenSecret = options.accessTokenSecret;
  
  this.connection = new OAuth(
    'http://api.rdio.com/oauth/request_token',
    'http://api.rdio.com/oauth/access_token', 
    this.key,
    this.sharedSecret,
    "1.0",
    // we don't need a callback url, we've already obtain key and sharedSecret
    undefined,
    "HMAC-SHA1"
  );
};

Rdio.prototype = {
  apiUrl: 'http://api.rdio.com/1/'
}

/*
  I borrowed this methodology from https://github.com/nixme/rdio-ruby, but adapted it
  to javascript, obviously. The data is:
 
  rdionMethodName: [ authenticationRequired?, ['required','keys'], ['optional', 'keys']]
  
  and is used directly below this to add methods to the Rdio.prototype object.
*/
var apiMethodsDescription = {
  // Core
  get:                            [false, ['keys'], ['extras', 'options']],
  getObjectFromShortCode:         [false, ['short_code'], ['extras']],
  getObjectFromUrl:               [false, ['url'], ['extras']],

  // Catalog
  getAlbumsByUPC:                 [false, ['upc'], ['extras']],
  getAlbumsForArtist:             [false, ['artist'], ['featuring', 'extras', 'start', 'count']],
  getTracksByISRC:                [false, ['isrc'], ['extras']],
  getTracksForArtist:             [false, ['artist'], ['appears_on', 'extras', 'start', 'count']],
  search:                         [false, ['query', 'types'], ['never_or', 'extras', 'start', 'count']],
  searchSuggestions:              [false, ['query'], ['extras']],

  // Collection
  addToCollection:                [true,  ['keys'], []],
  getAlbumsForArtistInCollection: [false, ['artist'], ['user', 'extras']],
  getAlbumsInCollection:          [false, [], ['user', 'start', 'count', 'sort', 'query', 'extras']],
  getArtistsInCollection:         [false, [], ['user', 'start', 'count', 'sort', 'query', 'extras']],
  getTracksForAlbumInCollection:  [false, ['album'], ['user', 'extras']],
  getTracksForArtistInCollection: [false, ['artist'], ['user', 'extras']],
  getTracksInCollection:          [false, [], ['user', 'start', 'count', 'sort', 'query', 'extras']],
  removeFromCollection:           [true,  ['keys'], []],
  setAvailableOffline:            [true,  ['keys', 'offline'], []],

  // Playlists
  addToPlaylist:                  [true,  ['playlist', 'tracks'], []],
  createPlaylist:                 [true,  ['name', 'description', 'tracks'], ['extras']],
  deletePlaylist:                 [true,  ['playlist'], []],
  getPlaylists:                   [true,  [], ['extras']],
  removeFromPlaylist:             [true,  ['playlist', 'index', 'count', 'tracks'], []],
  setPlaylistCollaborating:       [true,  ['playlist', 'collaborating'], []],
  setPlaylistCollaborationMode:   [true,  ['playlist', 'mode']],
  setPlaylistFields:              [true,  ['playlist', 'name', 'description'], []],
  setPlaylistOrder:               [true,  ['playlist', 'tracks'], []],

  // Social Network
  addFriend:                      [true,  ['user'], []],
  currentUser:                    [true,  [], ['extras']],
  findUser:                       [false, [], ['email', 'vanityName', 'extras']],
  removeFriend:                   [true,  ['user'], []],
  userFollowers:                  [false, ['user'], ['start', 'count', 'extras']],
  userFollowing:                  [false, ['user'], ['start', 'count', 'extras']],

  // Activity and Statistics
  getActivityStream:              [false, ['user', 'scope'], ['last_id', 'extras']],
  getHeavyRotation:               [false, [], ['user', 'type', 'friends', 'limit', 'start', 'count', 'extras']],
  getNewReleases:                 [false, [], ['time', 'start', 'count', 'extras']],
  getTopCharts:                   [false, ['type'], ['start', 'count', 'extras']],

  // Playback
  getPlaybackToken:               [false, ['domain'], []]
};


/*
  Adds rdio api methods to the Rdio.prototype object. These take the form of:
  
  rdioObject.aMethodName(options, cback){}, 
  
  e.g. 
  var rdio = new Rdio({ ... });
  rdio.search({ query: 'John Mayer' }, function(jsonString){ console.log(jsonString)} );
  
  These are use primarly in the rdio api proxying route in the express application,
  where the callback is an anonymous function where the original request/response are
  inside the scope and used to directly send the response from rdio to
  the Ember application that initially requested it.
*/
Object.keys(apiMethodsDescription).forEach(function(methodName){
  var methodOptions = apiMethodsDescription[methodName],
      authenticationRequired = methodOptions[0],
      requieredParameters = methodOptions[1],
      extraParameters = methodOptions[2];
      
  Rdio.prototype[methodName] = function(options, cback){
    
    // rdio wants arrays as a comma separated list
    Object.keys(options).forEach(function(key){
      if(Array.isArray(options[key])){
        options[key] = options[key].join(',')
      }
    });
    options.method = methodName;
    
    this.connection.post(
      this.apiUrl,
      this.accessToken,
      this.accessTokenSecret,
      // the post body, which are the options with the methodName added to them
      options,
      // post content-type, doesn't matter here.
      null,
      // on response, just call the provided callback. data is a JSON-format string
      function(error, data){ cback(data);}
    )
  }
});

exports.Rdio = Rdio;